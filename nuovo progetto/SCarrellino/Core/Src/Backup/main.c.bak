/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "can.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "fsm.h"
#include "scarrellino_fsm.h"
#include "stdbool.h"
#include "string.h"
#include "I2C_LCD.h"
#include "ntc.h"
#include "mcb.h"
#include "can_functions.h"
#include "string.h"
#include "ECU_level_functions.h"
#include "SW_Watchdog.h"


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MyI2C_LCD I2C_LCD





uint8_t raw = 0u;

bool start_fsm = 0;
volatile uint16_t ntc_value;
volatile uint8_t ntc_temp;
volatile char ntc_temp_buffer[21];
FSM_HandleTypeDef hfsm;

uint8_t volatile error_code = 30;


CAN_RxHeaderTypeDef    RxHeader;
uint32_t               txmailbox;
uint8_t                RxData[8];
uint32_t               rxfifo;

bool volatile can_rx_flag = 0;



/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
 


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_CAN1_Init();
  MX_TIM4_Init();
  MX_ADC1_Init();
  MX_CAN2_Init();
  MX_I2C3_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_TIM8_Init();
  MX_TIM9_Init();
  MX_TIM12_Init();
  MX_TIM2_Init();
  MX_USART3_UART_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */


I2C_LCD_Init(MyI2C_LCD);


HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_4);
HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &ntc_value, 1);


// attivazione
if(HAL_CAN_Start(&hcan1) != HAL_OK){
    error_code = CAN1_start_error;
    Error_Handler();
  }


if(HAL_CAN_Start(&hcan2) != HAL_OK){
    error_code = CAN2_start_error;
    Error_Handler();
  }
  else( HAL_UART_Transmit(&LOG_UART, (uint8_t *)"\n\n\rCAN pronta\n\r", strlen("\n\n\rCAN pronta\n\r"), 100));


 // attivazione interrupt Rx
if (HAL_CAN_ActivateNotification(&hcan1, 
    CAN_IT_RX_FIFO0_MSG_PENDING |
    CAN_IT_RX_FIFO1_MSG_PENDING |
    CAN_IT_ERROR_WARNING |
    CAN_IT_ERROR_PASSIVE |
    CAN_IT_BUSOFF |
    CAN_IT_LAST_ERROR_CODE |
    CAN_IT_ERROR |
    CAN_IT_TX_MAILBOX_EMPTY
  ) != HAL_OK)
  {
    HAL_UART_Transmit(&LOG_UART, (uint8_t *)"errore attivazione IT\n\r", strlen("errore attivazione IT\n\r"), 10);
    error_code = CAN_it_activation_error;
	  Error_Handler();
  }
  
if (HAL_CAN_ActivateNotification(&hcan2, 
    CAN_IT_RX_FIFO1_MSG_PENDING |
    CAN_IT_RX_FIFO0_MSG_PENDING |
    CAN_IT_ERROR_WARNING |
    CAN_IT_ERROR_PASSIVE |
    CAN_IT_BUSOFF |
    CAN_IT_LAST_ERROR_CODE |
    CAN_IT_ERROR |
    CAN_IT_TX_MAILBOX_EMPTY
  ) != HAL_OK)
  {
    HAL_UART_Transmit(&LOG_UART, (uint8_t *)"errore attivazione IT brusa\n\r", strlen("errore attivazione IT brusa\n\r"), 10);
    error_code = CAN_it_activation_error;
	  Error_Handler();
  }


//fsm
  uint8_t n_events = 0;
 
  if (FSM_SCARRELLINO_FSM_init(&hfsm, n_events, run_callback_1, transition_callback_1) != STMLIBS_OK){
    error_code = init_fsm_error;
    Error_Handler();
  }
  if (FSM_start(&hfsm) != STMLIBS_OK){
    error_code = fsm_start_error;
    Error_Handler();
  }


IMD_err_on;
AMS_err_on;
can_WD_setting();
//can_WD_start();




//AIR_CAN_Cmd_On();
//ChargeENcmdON();
//I2C_LCD_Clear(I2C_LCD);
//I2C_LCD_WriteString(I2C_LCD, "air chiusi");
//__disable_irq();



HAL_TIM_Base_Start_IT(&htim6);


#ifdef TEST

can_tx_1();

can_tx_2();

can_tx_3();

can_tx_4();

can_tx_5();

can_tx_6();

can_tx_7();

#endif



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

   FSM_routine(&hfsm);

   /*
   if (SW_Wachdog_routine() != HAL_OK){

    error_code = watch_dog_error;
    char buffer[40];
    extern bool  index_error[number_of_struct];
    for (uint8_t i = 0;i< number_of_struct; i++){
       if (index_error[i] == 1) {
        sprintf(buffer, "watch dog error index = %d\n\r", i);
        HAL_UART_Transmit(&LOG_UART, (uint8_t *)buffer, strlen(buffer), 100);
       }


    }
    Error_Handler();

     
     }

     */

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

    AIR_CAN_Cmd_Off();
    __disable_irq();

    //STOP CHARGE

    ChargeENcmdOFF;
    ChargeBlueLedOff;
    ErrLedOn;
    TSAC_fan_off;

  //display error
    error_display();
    buzzer_12khz;

    #ifndef silence
    buzzer_on;
    #endif

    __enable_irq();
    HAL_Delay(2000);
    __disable_irq();
    buzzer_off;
  

  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
